; 単純パーセプトロン

; 観測データの列 x = (x1 x2 ... xn) に対して結果(答え) {1, -1}
; があった時，ある列 r = (r1 r2 ... rn r0) によって
;   let y = (x ++ '(1)) * r = x1*r1 + ... + xn*rn + 1*r0
;   if y > 0 then 1 else -1
; とできるような線形分離をするためモデル
; そのrを作るのが単純パーセプトロンです

(use srfi-1 :only (fold))

; (answer . (datum)) のリスト
(define samples
    '( ( 1 . (1 -1 10))
       ( 1 . (3  0  0))
       ( 1 . (0  3 20))
       (-1 . (-1 2  0))
       (-1 . (2 -6  1))
       (-1 . (0  0  0)) ))

(define (innerprod a b) (fold + 0 (map * a b)))

; 一つのデータについて係数列 param が，正しく答えを予測できるならそのままparamを返し
; さもなくばちょっと調整して返す (これによって他のデータについて誤るようになるかも
; しれないけれど，それはほうっておく)
(define (update param data ans)
  (if (positive? (* (innerprod param data) ans))
      param
      (let* ([data/10 (map (cut * <> 3) data)]
             [param* (map (if (positive? ans) + -) param data/10)])
        (update param* data ans))))

; samples の各々要素について update し続ける
(define (cycle param)
  (let loop ((p param) (s samples))
    (if (null? s) p
        (let1 it (car s)
          (loop (update p (append (cdr it) '(1)) (car it)) (cdr s))))))

(define (has? p ls) (find (cut equal? p <>) ls))

; 収束するまで cycle した結果 r を得る
(define r
      (let unfold ((p '(0 0 0 0)) (his '()))
        (let1 p+ (cycle p)
        (if (has? p+ his)
            p
            (unfold p+ (cons p+ his))))) )

; check
(for-each (lambda (l)
  (format #t "~a : ~a\n" (car l) (innerprod r (append (cdr l) '(1)))))
  samples)

; vim: set ft=scheme:
