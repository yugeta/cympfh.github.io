/**
 * add two floating numbers like VHDL(?)
 */
#include <stdio.h>
#include "fadd.h"

#define at(n,i) ((n&(1<<i))?1:0)
 // "at" means "n[i]"
#define set(n,i,b) (b? (n|(1<<i)) : (n&~(1<<i)))
 // "set" means "n[i]=b"

void main () {
    union {
        float f;
        int i;
    } a, b, c;

    scanf("%f %f", &a.f, &b.f);
    c.i = fadd(a.i, b.i);
    printf("%f\n", c.f);
}

int slice(int n, int pos, int len) { // n[pos .. (pos+len-1)]
    int ret = 0, i;
    for (i=0;i<len;++i) {
        int a = at(n,pos+i);
        ret = set(ret, i, a);
    }
    return ret;
}

int fadd(int n, int m) {
    int s_n = at(n, 31),
        s_m = at(m, 31),
        e_n = slice(n, 23, 8),
        e_m = slice(m, 23, 8),
        m_n = slice(n, 0, 23),
        m_m = slice(m, 0, 23);

    if (e_n > e_m) {
        return fadd2(s_n, e_n, m_n, s_m, e_m, m_m);
    } else if(e_n < e_m) {
        return fadd2(s_m, e_m, m_m, s_n, e_n, m_n);
    } else if(m_n > m_m) {
        return fadd2(s_n, e_n, m_n, s_m, e_m, m_m);
    } else {
        return fadd2(s_m, e_m, m_m, s_n, e_n, m_n);
    }
}
int fadd2 (s1, e1, m1, s2, e2, m2) {
    int s3, e3, m3, i;

    m1 = set(m1, 23, 1);
    m2 = set(m2, 23, 1); // 24bit

    m2 = m2 >> (e1 - e2);
    s3 = s1;
    e3 = e1;

    if (s1 == s2) { // when add
        m3 = m1 + m2; // 25bit
        m3 = m3 << 4; // just space
    } else {
        m3 = (m1<<4) - (m2<<4);
    }

    // normalize
    i = find_top(m3, 32);

    // let m3[27] is top bit
    if (i > 27) {
        int diff = i - 27;
        m3 = m3 >> diff;
        e3 += diff;
    } else {
        int diff = 27 - i;
        m3 = m3 << diff;
        e3 -= diff;
    }
    m3 = slice(m3, 4, 23); // m3[4 .. 26]

    return int2float(s3, e3, m3);
}

int find_top (int n, int from) { // max { i ; n[i]==1 }
    int i;
    for (i=from;i>=0;--i) {
        if (at(n,i)) return i;
    }
    return i;
}

int int2float(int s, int e, int m) {
    int i, ret = 0;
    for (i=0;i<23;++i) {
        ret = set(ret, i, at(m,i));
    }
    for (i=0;i<8;++i) {
        ret = set(ret, i+23, at(e,i));
    }
    ret = set(ret, 31, s);

    return ret;
}
