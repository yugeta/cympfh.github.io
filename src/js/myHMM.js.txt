const jc = require("./judgeChar").jc
    , HMM = require("./hmm").HMM
    ;

function myHMM(n) {

  var hmm = new HMM(n);

  this.train = mytrain;
  this.test = mytest;
  this.save = hmm.save;
  this.restore = hmm.restore;

  function mytrain(tagged) {
    const v = toVector(tagged)
        , t = filter(tagged);
    hmm.train(v, t);

		// 実験
		hmm.train(v.reverse(), t.reverse());

    // where
    function mark (str, n){ return str.split("").map(function(x){ return n }) }
    function filter(str) {
      var r = str.match(/^(.*)<em>(.+?)<\/em>(.*)/);
      if (!r) return mark(str, 0);
      return filter(r[1]).concat(mark(r[2], 1).concat(filter(r[3])))
    }
  }

  function mytest(str) {
    var v = toVector(str);
    var d = hmm.test(v);

		// 実験
		var rd = hmm.test(v.reverse()).reverse();
    rd = flatten(rd);
		d = d.map(function(x, i) {
			return (x && rd[i]) ? 1 : 0
		});
		d = flatten(d);

    var ret = "";
    for (var i=0, l=d.length; i<l; ++i) {
      var di = d[i], dn = d[i+1];
      if (i === 0 && di === 1) {
        ret += "<em>";
      }
      ret += str[i];
      if (di===1 && dn===0)  ret += "</em>";
      if (di===0 && dn===1)  ret += "<em>";
      if (di===1 && i===l-1) ret += "</em>";
    }
    return ret;

    // where
    function flatten(d) {
      if (d.length < 3) return d;

      var sum = d[0]+d[1]+d[2]
        , d2 = [];

      for (var i=0, l=d.length; i<l; ++i) {
        d2[i] = Math.round((d[i] + sum) / (i===0 ? 3 : i===1? 4 : i===l-1? 3 : i===l-2? 4 : 5));
        sum += (i+3 in d ? d[i+3] : 0) - (i-2 in d ? d[i-2] : 0);
      }
      // console.log("flatten")
      // console.log(d)
      // console.log(d2)
      return d2;
    }
  }

  // where

  function toVector(str) {
    function getRaw(str) {
      str = str.replace(/<em>/g, "");
      str = str.replace(/<\/em>/g, "");
      return str;
    }
    return getRaw(str).split("").map(jc.test);
  }

}

exports.myHMM = myHMM;
