import Data.List
import Data.Char
import Data.Maybe
import Data.Tuple
import Debug.Trace
import Data.Array
import Data.Array.IO
import Control.Monad
import Control.Applicative
import Control.Arrow
import qualified Data.ByteString.Char8 as B
import qualified Data.Map as M
import Text.Printf

readInts :: IO [Int]
readInts = map read . words <$> getLine
readBInt = fst . fromJust . B.readInt
readBInts = map readBInt . B.words <$> B.getLine

(|>) x f = f x; infixl 1 |>

debug x = trace ("# " ++ show x) x

main :: IO ()
main = do
    ls <- readInts
    print $ sum ls

