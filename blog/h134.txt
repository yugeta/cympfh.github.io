Sun Dec  8 05:32:20 JST 2013

SNLP Chapter7
確認したことと疑問にもったことのメモ

Brown et al. 1991b
Flip-Flop algorithm
An information-theoretic approach

意味を複数持つような"曖昧語"の意味(sense)をどう解釈するかの
アルゴリズム


Brownさんはどこの人か知らないけど
この人はフランス語の文を英語文に自動翻訳することを用例として
このアルゴリズムを考案してる

w というフランス語の単語は
  ts = {t1, t2, t3 ... tN}
というN個の意味を持つ．但しtはtranslateのtなので意味ではなくて
翻訳，と言ったほうが良いかもしれない

どの意味であるかの指標の値をindicatorと呼ぶ．indicatorというのは
具体的には w が動詞ならその目的語がこれこれである(ならば1，でなければ0)
だとか，wのすぐ左の語が数値であるか，とか，wを含む文の時制が現在である
だとか

複数考えられるindicatorの値を
  xs = {x1, x2 ... xM}
とする

indicatorというのはwに対して自分で用意しないといけないみたい
自分で用意する時点でもう，個別のアルゴリズムが書けると思うんだけど

Flip-Flopアルゴリズムは tsを2つに分割して，つまりwの解釈を二通りに
分割して，それぞれに対応するようにxsを2つに分割するためのもの

ts -> P1, P2
xs -> Q1, Q2

と分割できたら，
w に対して indicator x がQ1にゾクしてたらP1の意味
と判別する

で，その分割をどうするか
訓練データの中で相互情報量 I(P; Q) = I({P1,P2}, {Q1,Q2}) を最大と
なるような分割を探索する

----
例

ある訓練データの中で曖昧語 w について
次の4つが1つずつ，見つけられた

indicator - sense
    x     -   a
    x     -   b
    y     -   b
    z     -   d

確率は単純に割合だとすることにして

Pr(x,a) = .25
Pr(x,b) = .25
Pr(y,b) = .25
Pr(z,d) = .25

Pr(x) = 0.5
Pr(y) = .25
Pr(z) = .25

Pr(a) = .25
Pr(b) = 0.5
pr(d) = .25

ということになる

相互情報量は次のように求められる

> function I (p1, p2, q1, q2) {
>   function sub(p, q) {
>     var h = Pr2(p,q);
>     if (h < 0.0001) return h;
>     return h * Math.log( h / Pr0(p) / Pr1(q) );
>   }
>   return sub(p1,q1) + sub(p1,q2) + sub(p2,q1) + sub(p2,q2);
> }
> 
> function Pr0(p) {
>   "use strict";
>   var ps = p.split(",");
>   return ps.map(function(p) {
>     if (p == "b") return 0.5;
>     else return 0.25;
>   }).reduce(function(x,y){return x+y})
> }
> 
> function Pr1(q) {
>   "use strict";
>   var qs = q.split(",");
>   return qs.map(function(q) {
>     if (q === "x") return 0.5;
>     else return 0.25;
>   }).reduce(function(x,y){return x+y})
> }
> 
> function Pr2(p,q) {
>   var ps = p.split(",");
>   var qs = q.split(",");
>   var sum = 0;
> 
>   ps.forEach(function(p) {
>     qs.forEach(function(q) {
>       var r = 0;
>       if (p === "x" && q === "a") r = 0.25;
>       if (p === "x" && q === "a") r = 0.25;
>       if (p === "y" && q === "b") r = 0.25;
>       if (p === "z" && q === "d") r = 0.25;
>       sum += r;
>     })
>   });
> 
>   return sum;
> }
 
実際の値は

> console.log( I("x,y","z", "a,b", "d") );
> console.log( I("x","y,z", "a,b", "d") );
> console.log( I("","x,y,z", "a,b", "d") );
> console.log( I("x,y","z", "b", "a,d") );
> 
> // 0.6931471805599453
> // 0.34657359027997264
> // 0.21576155433883565
> // 0.34657359027997264

というわけで

P1 = {x,y}, P2 = {z}
Q1 = {a,b}, Q2 = {d}

が情報量を最大とさせる

で疑問点として
式の対称性から
P1とP2を入れ替えてもI(P;Q)の値は変わらない
Q1->P1, Q2->P2
という曖昧解消のアルゴリズムに一番大切なトコロなのに
P1とP2が入れ替わったら真逆になっちゃうじゃんか

どっか読み落としたのかな
