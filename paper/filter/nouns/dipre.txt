#
Dual
Iterative
Pattern
Relation
Extraction
(
DIPRE
)
HTML
テキスト
関係
R
よう
二つ
名詞
タプル
回収
彼ら
シナリオ
`(
本
タイトル
,
著者
)`
回収
タプル
こと
R
?
##
method
1
.
サンプル
関係
R
'
抽出
(
手
タプル
?)
`
R
'
=
Sample
`
2
.
コーパス
D
関係
R
'
共起
単語
O
`
O
=
FindOccurrences
R
',
D
`
3
.
O
パターン
P
`
P
=
GenPatterns
O
`
4
.
O
マッチ
関係
R
'
`
R
'
=
M
_
D
P
`
5
.
2
`
goto
2
`
##
pattern
pattern
`(
author
,
title
,
order
::
Bool
,
url
,
prefix
,
middle
,
suffix
)`
こと
.
order
以外
全部
`
String
`
型
prefix
,
suffix
さ
`
m
`
(
以下
?)
tokenize
対象
HTML
これ
妥当
###
意味
url
文書
URL
(
つまり
文書
ID
)
謎
こと
`
order
==
True
`
とき
文中
`
author
,
title
`
`
author
`
直前
`
m
`
文字
`
prefix
`
間
`
middle
`
`
title
`
直後
`
m
`
文字
`
suffix
`
`
order
==
False
`
`
title
,
author
`
順
こと
ほか
###
generate
a
pattern
`
order
`,
`
title
`,
`
author
`
共通
`
middle
`
文
それぞれ
prefix
最長
suffix
`
prefix
'`,
それぞれ
suffix
最長
prefix
`
suffix
'`,
それぞれ
url
最長
prefix
`
urlprefix
`
```
haskell
outpattern
=
(
title
,
author
,
order
,
urlprefix
,
prefix
',
middle
,
suffix
')
specificity
=
(
length
middle
)
*
(
length
urlprefix
)
*
(
length
prefix
')
*
(
length
suffix
')
```
specificity
適当
閾値
###
example
```
haskell
"
www
.
sff
.
net
/
locus
/
c
.*"
("<
LI
><
B
>",
Title
,
"</
B
>
by
",
Author
,
"
(")
```
##
実験
###
datum
-
24
million
web
pages
-
start
with
5
tuples
(
author
,
title
)
###
first
iteration
-
105
patterns
-
9369
unique
(
author
,
title
)
###
final
iteration
-
346
patterns
-
15257
unique
(
author
,
title
)
