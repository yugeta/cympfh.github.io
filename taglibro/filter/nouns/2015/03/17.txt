Tue
Mar
17
16
:
42
:
34
JST
2015
===
##
vim
編集
途中
経過
監視
-
markdown
-
gnuplot
-
dot
言語
これら
vim
編集
途中
経過
コンパイル
(
変換
)
結果
###
markdown
pandoc
html
pdf
変換
html
変換
脳
内
pdf
こと
容易
###
gnuplot
png
画像
出力
###
dot
言語
png
画像
出力
Linux
`
graphviz
`
パッケージ
`
vimdot
`
これ
の
##
```
haskell
#
watch
.
coffee
fs
=
require
'
fs
'
path
=
require
'
path
'
socket
_
io
=
require
'
socket
.
io
'
http
=
require
'
http
'
express
=
require
'
express
'
#
make
server
app
=
express
()
server
=
http
.
Server
app
io
=
socket
_
io
server
app
.
get
'/',
(
req
,
res
)
->
res
.
writeHead
200
,
'
Content
-
Type
':
'
text
/
html
'
res
.
end
'''
<
title
>
preview
</
title
>
<
script
src
="/
socket
.
io
/
socket
.
io
.
js
"></
script
>
<
body
><
div
id
='
win
'></
div
>
<
script
>
var
socket
=
io
.
connect
("
http
://
127
.
0
.
0
.
1
");
socket
.
on
('
change
',
function
(
data
)
{
win
.
innerHTML
=
data
;
});
</
script
>
'''
app
.
get
/
local
\/.*/,
(
req
,
res
)
->
filename
=
req
.
url
.
replace
/^\/
local
\//,
''
.
replace
/\?.*$/,
''
res
.
sendFile
path
.
resolve
filename
server
.
listen
80
,
(->)
io
.
listen
server
#
read
configure
conf
=
require
"./#{
process
.
argv
[
2
]}.
coffee
"
#
socket
gsocket
=
false
emit
=
->
unless
gsocket
return
console
.
log
'
emit
',
gsocket
.
id
conf
.
compile
(
err
,
data
)
->
throw
err
if
err
console
.
log
data
gsocket
.
emit
'
change
',
data
io
.
sockets
.
on
'
connection
',
(
socket
)
->
gsocket
=
socket
do
emit
#
watch
the
file
fs
.
exists
conf
.
srcfile
,
(
bl
)
->
unless
bl
console
.
log
"#{
conf
.
srcfile
}
not
exists
"
process
.
exit
0
fs
.
watchFile
conf
.
srcfile
,
{
interval
:
300
},
(
event
)
->
console
.
log
event
do
emit
```
監視
対象
ファイル
それ
処理
設定
ファイル
用意
ファイル
名
兎
角
処理
関数
実用
上
CoffeeScript
JavaScript
設定
ファイル
モジュール
###
markdown
.
coffee
```
haskell
fs
=
require
'
fs
'
{
exec
}
=
require
'
child
_
process
'
srcfile
=
'./
test
.
md
'
compile
=
(
cont
)
->
exec
"
pandoc
-
s
-
t
html
5
-
i
#{
srcfile
}
-
o
test
.
html
",
(
err
)
->
console
.
warn
err
if
err
fs
.
readFile
'./
test
.
html
',
'
utf
8
',
(
err
,
data
)
->
throw
err
if
err
cont
false
,
data
module
.
exports
=
srcfile
:
srcfile
compile
:
compile
```
-
srcfile
監視
対象
ファイル
名
定義
-
変更
時
処理
継続
手続き
形
定義
(
compile
)
-
継続
一
引数
エラー
二
引数
html
解釈
可能
文字
列
###
gnuplot
.
coffee
```
haskell
{
exec
}
=
require
'
child
_
process
'
srcfile
=
'
test
.
plt
'
compile
=
(
cont
)
->
exec
"
gnuplot
#{
srcfile
}",
(
err
)
->
console
.
warn
err
if
err
cont
err
,
"<
img
src
=
local
/
test
.
png
?#{
Math
.
random
()}>"
module
.
exports
=
srcfile
:
srcfile
compile
:
compile
```
-
`
src
=
local
/
hoge
/
fuga
`
`
path
.
resolvec
'
hoge
/
fuga
'`
-
キャッシュ
用意
`?
Math
.
random
()`
###
dot
.
coffee
```
haskell
{
exec
}
=
require
'
child
_
process
'
srcfile
=
'./
test
.
dot
'
compile
=
(
cont
)
->
exec
'
dot
-
Tpng
test
.
dot
>
test
.
png
',
(
err
)
->
console
.
warn
err
if
err
cont
err
,
"<
img
src
=
local
/
test
.
png
?#{
Math
.
random
()}>"
module
.
exports
=
srcfile
:
srcfile
compile
:
compile
```
-
gnuplot
場合
同様
###
python
.
coffee
```
haskell
fs
=
require
'
fs
'
{
exec
}
=
require
'
child
_
process
'
srcfile
=
'./
test
.
py
'
compile
=
(
cont
)
->
exec
"
python
#{
srcfile
}
>
out
",
(
err
)
->
console
.
warn
err
if
err
fs
.
readFile
'./
out
',
'
utf
8
',
(
err
,
data
)
->
throw
err
if
err
cont
false
,
data
.
replace
/\
n
/
g
,
'<
br
>'
module
.
exports
=
srcfile
:
srcfile
compile
:
compile
```
-
html
出力
改行
##
usage
`
watch
.
coffee
`
`
conf
.
coffee
`
監視
対象
ファイル
全部
ディレクトリ
こと
開始
時
監視
対象
ファイル
存在
こと
```
bash
sudo
coffee
watch
.
coffee
conf
```
`
python
.
coffee
`
```
bash
touch
test
.
py
sudo
coffee
watch
.
coffee
python
```
別
窓
`
test
.
py
`
編集
ファイル
変更
チェック
の
保存
時
ファイル
上書き
瞬間
`
python
test
.
py
>
out
`
コンパイル
結果
ブラウザ
`
http
://
127
.
0
.
0
.
1
/`
こと
確認
##
他
`
fs
.
watch
`
`
fs
.
watchFile
`
二つ
目的
手元
Mac
`
fs
.
watch
`
明らか
信用
挙動
ドキュメント
こん
socket
.
io
面倒
こと
リロード
html
ゎ
