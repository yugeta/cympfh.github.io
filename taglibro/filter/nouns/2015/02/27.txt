Fri
Feb
27
13
:
10
:
24
JST
2015
===
インターンシップ
経験
ブログ
こと
要請
下書き
ここ
#
[
express
v
.
4
.
12
.
0
](
https
://
www
.
npmjs
.
com
/
package
/
express
)
簡易
サーバ
以下
ミドル
ウェア
(
後述
)
,
`/`
POST
,
ヘッダ
データ
```
haskell
express
=
require
'
express
'
app
=
express
()
app
.
post
'/',
(
req
,
res
)
->
buf
=
''
req
.
on
'
data
',
(
chunk
)
->
buf
+=
chunk
req
.
on
'
end
',
->
res
.
end
buf
app
.
listen
3030
,
(->)
```
上
コード
実行
間
curl
コマンド
リクエスト
```
bash
$
cat
test
.
txt
HOGEHOGE
$
cat
test
.
txt
|
curl
-
X
POST
-
F
'
hoge
=<-'
localhost
:
3030
-
-------------------------
5
aea
96
f
7715
e
317
d
Content
-
Disposition
:
form
-
data
;
name
="
hoge
"
HOGEHOGE
-
-------------------------
5
aea
96
f
7715
e
317
d
--
$
cat
test
.
txt
|
curl
-
X
POST
-
F
'
hoge
=@-'
localhost
:
3030
-
-------------------------
38
e
51
e
446
a
7
b
05
f
6
Content
-
Disposition
:
form
-
data
;
name
="
hoge
";
filename
="-"
Content
-
Type
:
application
/
octet
-
stream
HOGEHOGE
-
-------------------------
38
e
51
e
446
a
7
b
05
f
6
--
$
curl
-
X
POST
-
d
hoge
=
fuga
localhost
:
3030
hoge
=
fuga
$
curl
-
X
POST
-
d
name
=
cympfh
-
d
pwd
=
koregacympfhnopwd
localhost
:
3030
name
=
cympfh
&
pwd
=
koregacympfhnopwd
```
#
ミドル
ウェア
ところ
[
body
-
parser
v
.
1
.
12
.
0
](
https
://
www
.
npmjs
.
com
/
package
/
body
-
parser
)
```
haskell
express
=
require
'
express
'
bodyParser
=
require
'
body
-
parser
'
app
=
express
()
app
.
use
bodyParser
.
urlencoded
{
extended
:
false
}
app
.
use
bodyParser
.
json
()
app
.
post
'/',
(
req
,
res
)
->
res
.
json
req
.
body
app
.
listen
3030
,
(->)
```
```
bash
$
curl
-
X
POST
-
d
name
=
cympfh
-
d
pwd
=
koregacympfhnopwd
localhost
:
3030
{"
name
":"
cympfh
","
pwd
":"
koregacympfhnopwd
"}%
```
-
F
データ
ん
#
非同期
的
処理
node
非同期
的
処理
湯水
よう
こと
```
haskell
express
=
require
'
express
'
bodyParser
=
require
'
body
-
parser
'
app
=
express
()
app
.
use
bodyParser
.
urlencoded
{
extended
:
false
}
app
.
use
bodyParser
.
json
()
asyncFn
=
(
cont
)
->
setTimeout
(->
cont
{
ok
:
'
ok
'
}),
2000
app
.
post
'/',
(
req
,
res
)
->
asyncFn
(
data
)
->
res
.
json
data
app
.
listen
3030
,
(->)
```
-
変換
`(
lambda
(
x
)
(
f
x
))`
`
f
`
等価
こと
JavaScript
```
python
express
=
require
'
express
'
bodyParser
=
require
'
body
-
parser
'
app
=
express
()
app
.
use
bodyParser
.
urlencoded
{
extended
:
false
}
app
.
use
bodyParser
.
json
()
asyncFn
=
(
cont
)
->
setTimeout
(->
cont
{
ok
:
'
ok
'
}),
2000
app
.
post
'/',
(
req
,
res
)
->
asyncFn
res
.
json
#
i
found
a
bug
here
app
.
listen
3030
,
(->)
```
これ
実行
間
適切
POST
これ
次
よう
エラー
```
/
usr
/
local
/
lib
/
node
_
modules
/
express
/
lib
/
response
.
js
:
226
var
replacer
=
app
.
get
('
json
replacer
');
^
TypeError
:
Cannot
call
method
'
get
'
of
undefined
at
json
(/
usr
/
local
/
lib
/
node
_
modules
/
express
/
lib
/
response
.
js
:
226
:
22
)
at
[
object
Object
]._
onTimeout
(/
Users
/
cympfh
/
test
/
test
.
coffee
:
9
:
18
)
at
Timer
.
listOnTimeout
[
as
ontimeout
]
(
timers
.
js
:
112
:
15
)
```
最終
発表
日
私
会場
鯖
何
メンバ
指摘
ログ
エラー
問題
箇所
相当
苦労
(
?)
```
haskell
asyncFn
=
(
res
)
->
setTimeout
(->
res
.
json
{
ok
:
'
ok
'
}),
2000
app
.
post
'/',
(
req
,
res
)
->
asyncFn
res
```
これ
`
res
.
json
`
res
オブジェクト
メソッド
それ
ダイナミックス
コープ
の
```
python
Obj
=
i
:
1
read
:
->
@
i
console
.
warn
Obj
.
read
()
#
1
async
=
(
fn
)
->
setTimeout
(->
console
.
warn
fn
()),
2000
async
Obj
.
read
#
undefined
```
###
世界
平和
よう
