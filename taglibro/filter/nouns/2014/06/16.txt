2014
年
6
月
16
日
月曜日
12
:
50
:
15
JST
===
[
2014
/
04
/
20
](../
04
/
20
.
md
.
html
)
自分
記事
気
訂正
```
haskell
data
Tree
=
Leaf
|
Node
Int
Tree
Tree
deriving
Show
--
適当
木
1
t
=
Node
0
(
Node
1
(
Node
3
Leaf
Leaf
)
Leaf
)
(
Node
2
Leaf
(
Node
4
Leaf
Leaf
))
--
適当
木
2
s
=
Leaf
--
木
順
リスト
bfs
tree
=
map
root
q
where
root
Leaf
=
Nothing
root
(
Node
x
_
_)
=
Just
x
q
=
tree
:
walk
q
walk
(
Leaf
:
_)
=
[]
walk
((
Node
x
l
r
)
:
rest
)
=
l
:
r
:
walk
rest
main
=
do
print
$
bfs
t
print
$
bfs
s
```
```
haskell
[
Just
0
,
Just
1
,
Just
2
,
Just
3
,
Nothing
,
Nothing
,
Just
4
,
Nothing
,
Nothing
]
[
Nothing
]
```
前
記事
の
一行
```
haskell
walk
(
Leaf
:
_)
=
[]
```
今
はし
前
```
haskell
walk
(
Leaf
:
_)
=
[
Leaf
]
```
walk
もの
の
自身
答え
(`
tree
:
walk
q
`)
---
幅優先
の
さ
無限
場合
一つ
場合
```
haskell
infinityTree
=
make
0
where
make
n
=
Node
n
(
make
m
1
)
(
make
m
2
)
where
m
1
=
n
*
2
+
1
m
2
=
n
*
2
+
2
main
=
do
print
$
take
20
$
bfs
infinityTree
```
.
