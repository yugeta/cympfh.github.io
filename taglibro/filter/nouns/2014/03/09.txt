2014
年
3
月
9
日
日曜日
18
:
32
:
02
JST
関数
型
プログラミング
言語
Haskell
Part
25
http
://
toro
.
2
ch
.
net
/
test
/
read
.
cgi
/
tech
/
1393313450
/
>
11
名前
デフォルト
名無し
さん
[
sage
]：
2014
/
02
/
25
(
火
)
20
:
10
:
26
.
83
>
Data
.
Function
.
fix
関数
何
ため
の
>
の
>
>
fix
::
(
a
->
a
)
->
a
>
fix
f
=
let
x
=
f
x
in
x
>
>
>
12
名前
デフォルト
名無し
さん
[
sage
]：
2014
/
02
/
25
(
火
)
20
:
17
:
14
.
12
>
再帰
関数
それ
自身
再帰
的
定義
定義
ため
>
Y
コンビネータ
よう
もの
そのもの
>
>
>
13
名前
デフォルト
名無し
さん
[]：
2014
/
02
/
25
(
火
)
20
:
17
:
35
.
74
>
\>\>
11
>
ループ
let
where
の
面倒
とき
>
flip
fix
(
0
::
Int
)
$
\
loop
i
->
do
>
putStrLn
$
"
total
"
++
show
i
>
n
<-
readLn
>
if
n
>=
0
then
loop
$!
n
+
i
else
return
()
---
上の
引用
```
haskell
flip
fix
(
0
::
Int
)
$
\
loop
i
->
do
putStrLn
$
"
total
"
++
show
i
n
<-
readLn
if
n
>=
0
then
loop
$!
n
+
i
else
return
()
```
`\
loop
i
->
do
{}`
`
loop
i
=
do
{}`
勘違い
脳
内
型
推論
失敗
```
haskell
fix
::
(
a
->
a
)
->
a
```
flip
一
引数
`
a
->
b
->
c
`
fix
a
`
b
->
c
`
解釈
こと
(
Haskell
ML
n
引数
かしら
)
```
haskell
flip
fix
::
b
->
((
b
->
c
)
->
b
->
c
)
->
c
```
b
=
Int
c
=
IO
()
`\
loop
i
`
`
loop
`
名前
処理
続行
表現
`
call
/
cc
`
大域
脱出
みたい
---
`\
loop
i
`
以下
バラ
```
haskell
import
Data
.
Function
main
::
IO
()
main
=
fix
loop
10
where
loop
::
(
Int
->
IO
())
->
Int
->
IO
()
loop
cont
i
=
if
i
<
0
then
return
()
else
do
{
print
i
;
cont
(
i
-
1
)
}
```
ここ
Scheme
おなじみ
ただ
再帰
```
haskell
import
Data
.
Function
main
::
IO
()
main
=
loop
10
where
loop
::
Int
->
IO
()
loop
i
=
if
i
<
0
then
return
()
else
do
{
print
i
;
loop
(
i
-
1
)
}
```
型
無理
`
loop
`
それ
中
計算
順序
の
一
回
気持ち
---
Haskell
ループ
表現
Data
.
Function
.
fix
以外
http
://
hackage
.
haskell
.
org
/
package
/
base
-
4
.
6
.
0
.
1
/
docs
/
Control
-
Arrow
.
html
>
class
Arrow
a
=>
ArrowLoop
a
where
>
loop
::
a
(
b
,
d
)
(
c
,
d
)
->
a
b
c
>
>
instance
ArrowLoop
(->)
where
>
loop
f
b
=
let
(
c
,
d
)
=
f
(
b
,
d
)
in
c
```
haskell
loop
f
b
=
fst
$
f
(
b
,
d
)
=
fst
$
f
(
b
,
snd
$
f
(
b
,
d
))
=
fst
$
f
(
b
,
snd
$
f
(
b
,
snd
$
f
(
b
,
d
)))
```
d
必要
回数
+
1
f
```
haskell
f
=
\(
b
,
d
)
->
(
b
-
1
,
d
)
loop
f
3
=
fst
$
f
(
3
,
d
)
=
fst
$
(
2
,
d
)
=
2
```
```
haskell
flip
loop
2
$
\(
b
,
d
)
->
(
d
b
,
\
x
->
if
x
<
0
then
[]
else
x
:
d
(
x
-
1
))
=
loop
f
2
where
f
(
b
,
d
)
=
(
d
b
,
\
x
->
if
x
<
0
then
[]
else
x
:
d
(
x
-
1
))
=
let
(
c
,
d
)
=
(
d
2
,
\
x
->
if
..
then
[]
else
x
:
d
(
x
-
1
))
in
c
=
d
2
where
d
=
\
x
->
if
..
then
[]
else
x
:
d
(
x
-
1
)
=
2
:
d
1
where
d
=
...
=
2
:
(
1
:
d
0
)
where
d
=
...
=
2
:
(
1
:
0
:
d
(-
1
))
where
=
[
2
,
1
,
0
]
--
fuck
the
lazy
```
ぇこんなの
幸せ
