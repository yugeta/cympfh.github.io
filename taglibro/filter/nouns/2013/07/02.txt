2013
/
07
/
02
Haskell
遅延
評価
モナド
計算
順序
こと
意味
理解
関数
引数
必要
評価
それ
入出力
```
haskell
import
System
.
IO
.
Unsafe
getLn
::
()
->
String
getLn
_
=
unsafePerformIO
getLine
int
::
String
->
Int
int
=
unsafePerformIO
.
readIO
getInt
::
()
->
Int
getInt
()
=
int
$
getLn
()
double
::
String
->
Double
double
=
unsafePerformIO
.
readIO
getDouble
::
()
->
Double
getDouble
()
=
double
$
getLn
()
```
`
unsafePerformIO
::
IO
a
->
a
`
便利
ん
プロ
コン
Haskell
時
為
テンプレート
つもり
上
.
getLn
getDouble
何かしら
引数
関数
毎回
入力
初め
```
haskell
getDouble
=
double
$
getLine
```
getDouble
複数
回
一行
入力
```
haskell
main
=
let
x
=
getInt
()
y
=
getInt
()
in
print
(
x
+
y
)
```
便利
```
haskell
main
=
let
x
=
getDouble
()
a
=
getInt
()
in
print
(
x
^
a
)
```
パース
エラー
私
GHCi
(^)
演算
右側
評価
getInt
の
コード
x
先
評価
よう
遅延
評価
デフォルト
こと
意味
コード
```
haskell
main
=
do
s
<-
getLine
x
<-
readIO
s
::
IO
Double
t
<-
getLine
a
<-
readIO
t
::
IO
Int
print
(
x
^
a
)
```
do
記法
(>>=)
```
haskell
main
=
do
x
<-
getLine
>>=
readIO
::
IO
Double
a
<-
getLine
>>=
readIO
::
IO
Int
b
<-
getLine
>>=
readIO
::
IO
Int
print
(
x
^(
a
+
b
))
```
Applicative
<$>
まとも
の
よう
の
```
(
define
-
macro
(
getInt
a
)
a
<-
getLine
>>=
readIO
::
Int
)
```
