Sun
Jul
14
20
:
27
:
00
JST
2013
#
疑問
点
継続
よう
名前
付き
let
の
エラー
下
コード
の
```
scheme
(
define
(
hoge
)
(
let
loop
((
i
0
))
(
if
(
odd
?
i
)
(
values
i
(
delay
(
loop
(+
i
1
))))
(
loop
(+
i
1
)))))
```
hoge
自然
数
奇数
次
奇数
継続
もどき
多値
```
scheme
gosh
>
(
hoge
)
1
#<
promise
0
x
8786910
>
```
2
目
実行
```
scheme
gosh
>
(
receive
(
j
next
)
(
hoge
)
(
force
next
))
3
```
ここ
多値
の
追記
---
Tue
Aug
6
10
:
53
:
06
JST
2013
名前
付き
let
名前
こと
確か
再帰
手続き
こと
```
scheme
gosh
>
(
let
rec
((
x
-
1
))
(
cond
[(<
x
0
)
rec
]
[(
zero
?
x
)
1
]
[
exe
(*
x
(
rec
(-
x
1
)))]))
#<
closure
rec
>
```
ここ
，(<
x
0
)
の
rec
ため
もの
```
scheme
gosh
>
(
define
f
(
let
rec
((
ls
-
1
))
(
cond
[(<
ls
0
)
rec
]
[(
zero
?
ls
)
1
]
[
else
(*
ls
(
rec
(-
ls
1
)))])))
f
gosh
>
(
f
10
)
3628800
```
最初
やつ
問題
こと
```
scheme
gosh
>
(
values
1
2
)
1
2
gosh
>
(
force
(
delay
(
values
1
2
)))
1
```
values
cons
```
scheme
gosh
>
(
let
rec
((
ls
'(
9
8
7
6
5
)))
(
if
(
null
?
ls
)
#
f
(
cons
(
car
ls
)
(
delay
(
rec
(
cdr
ls
))))))
(
9
.
#<
promise
0
x
9
d
5
f
590
>)
```
```
scheme
gosh
>
(
let
rec
((
ls
'(
9
8
7
6
5
)))
(
if
(
null
?
ls
)
#
f
(
begin
(
set
!
cc
(
delay
(
rec
(
cdr
ls
))))
(
car
ls
))))
9
gosh
>
(
force
cc
)
8
gosh
>
(
force
cc
)
7
```
call
/
cc
必要
