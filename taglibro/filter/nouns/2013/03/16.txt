Sat
Mar
16
11
:
27
:
39
JST
2013
```
;
:
vim
set
wildmode
=
longest
,
list
,
full
:
```
資本
主義
理念
原因
家
ネット
心
中
ぁ
これ
自分
時間
毎月
4000
円
権利
放棄
自由
以下
食堂
会話
不安
U
-
task
無事
進級
なり
さん
1
件
遅刻
病院
春
感じ
フリル
服
クソゲー
5
月
こっち
荷物
片付け
ん
展覧
会
周り
企業
人
顔
それ
俺
凧
糸
みたい
感じ
姉
押上
行
ぷよぷよ
ゃのことかうわぁ
---
Sat
Mar
16
13
:
09
:
15
JST
2013
fay
インストール
`
fay
::
Haskell
->
JavaScript
`
```
bash
$
cabal
install
fay
```
```
test
-
framework
-
th
-
0
.
2
.
4
depends
on
haskell
-
src
-
exts
-
1
.
13
.
5
which
failed
to
install
```
上
行
happy
1
.
7
以上
必要
happy
ググ
PATH
~/.
cabal
/
bin
/
追加
ダメ
しょうが
ナシ
```
bash
#
ln
~/.
cabal
/
bin
/
happy
/
bin
/
```
fay
fay
ため
サンプル
コード
fay
開発
段階
github
の
ほう
https
://
github
.
com
/
faylang
/
fay
/
tree
/
master
/
examples
```
bash
$
fay
--
version
fay
0
.
14
.
2
.
0
```
```
bash
$
cat
test
.
hs
module
Alert
where
import
FFI
import
Prelude
main
::
Fay
()
main
=
alert
$
"
Hello
,
World
!"
alert
::
String
->
Fay
()
alert
=
ffi
"
console
.
log
(%
1
)"
$
fay
-
O
-
o
test
.
js
test
.
hs
;
node
test
.
js
Hello
,
World
!
```
print
関数
みたい
show
先
該当
箇所
```
haskell
main
::
Fay
()
main
=
alert
$
show
$
"
Hello
,
World
!"
```
```
bash
$
fay
-
O
-
o
test
.
js
test
.
hs
;
node
test
.
js
{"
car
":"
H
","
cdr
":{"
car
":"
e
","
cdr
":{"
car
":"
l
","
cdr
":{"
car
":"
l
","
cdr
":{"
car
":"
o
","
cdr
":{"
car
":",","
cdr
":{"
car
":"
","
cdr
":{"
car
":"
W
","
cdr
":{"
car
":"
o
","
cdr
":{"
car
":"
r
","
cdr
":{"
car
":"
l
","
cdr
":{"
car
":"
d
","
cdr
":{"
car
":"!","
cdr
":
null
}}}}}}}}}}}}}
```
String
[
Char
]
show
ただ
#
toString
オブジェクト
中身
列挙
組み込み
#
toString
使い物
---
型
検査
為
時
ghc
そう
fay
あと
console
.
log
型
`
String
->
Fay
()`
`
a
->
Fay
()`
ん
なん
不可思議
こと
---
使い物
型
検査
よう
もの
私
fay
Haskell
Haskell
よう
もの
もの
```
haskell
module
Alert
where
import
FFI
import
Prelude
main
::
Fay
()
main
=
alert
$
show
$
a
where
a
::
[
Int
]
a
=
map
(\
x
->
x
*
x
)
[
1
,
2
,
3
]
alert
::
String
->
Fay
()
alert
=
ffi
"
console
.
log
(%
1
)"
```
```
bash
$
fay
-
O
-
o
test
.
js
test
.
hs
;
node
test
.
js
{"
car
":{"
forced
":
false
},"
cdr
":{"
forced
":
false
}}
```
遅延
の
出力
前
中身
評価
ん
```
hsakell
module
Alert
where
import
FFI
import
Prelude
main
::
Fay
()
main
=
alert
$
show
_
list
$
a
where
a
::
[
Int
]
a
=
map
(\
x
->
x
*
x
)
[
1
,
2
,
3
]
alert
::
String
->
Fay
()
alert
=
ffi
"
console
.
log
(%
1
)"
show
_
list
::
[
a
]
->
String
show
_
list
ls
=
"["
++
show
_
list
'
ls
++
"]"
show
_
list
'
ls
=
case
ls
of
[]
->
""
x
:
xs
->
(
show
x
)
++
",
"
++
(
show
_
list
'
xs
)
```
```
bash
fay
-
O
-
o
test
.
js
test
.
hs
node
test
.
js
[
1
,
4
,
9
,
]
```
もん
---
case
of
引数
パターン
マッチ
```
haskell
module
Alert
where
import
FFI
import
Prelude
main
::
Fay
()
main
=
alert
$
show
$
fact
10
where
fact
::
Int
->
Int
fact
0
=
1
fact
n
=
n
*
(
fact
(
n
-
1
))
alert
::
String
->
Fay
()
alert
=
ffi
"
console
.
log
(%
1
)"
```
```
bash
fay
-
O
-
o
test
.
js
test
.
hs
node
test
.
js
3628800
```
よう
さっき
ambiguous
type
連呼
くせ
わけ
---
```
haskell
module
Alert
where
import
FFI
import
Prelude
main
::
Fay
()
main
=
alert
$
show
$
fact
10
where
fact
0
=
1
fact
n
=
n
*
fact
(
n
-
1
)
alert
::
String
->
Fay
()
alert
=
ffi
"
console
.
log
(%
1
)"
```
```
bash
fay
-
O
-
o
test
.
js
test
.
hs
fay
:
test
.
hs
:
7
:
23
:
Ambiguous
type
variable
`
a
0
'
in
the
constraints
:
(
Eq
(
Automatic
a
0
))
arising
from
a
use
of
`
fact
'
at
test
.
hs
:
7
:
23
-
26
(
base
:
GHC
.
Num
.
Num
(
Automatic
a
0
))
arising
from
the
literal
`
10
'
at
test
.
hs
:
7
:
28
-
29
(
Prelude
.
Num
(
Automatic
a
0
))
arising
from
a
use
of
`
fact
'
at
test
.
hs
:
7
:
23
-
26
Probable
fix
:
add
a
type
signature
that
fixes
these
type
variable
(
s
)
In
the
second
argument
of
`($)',
namely
`
fact
10
'
In
the
second
argument
of
`($)',
namely
`
show
$
fact
10
'
In
the
expression
:
alert
$
show
$
fact
10
make
:
***
[
test
]
Error
1
```
例
fact
型
明記
型
検査
の
---
Sat
Mar
16
13
:
50
:
18
JST
2013
Fay
こっち
姿勢
大切
公式
ドキュメント
正座
朗読
[
Home
·
faylang
/
fay
Wiki
](
https
://
github
.
com
/
faylang
/
fay
/
wiki
)
>
A
proper
subset
of
Haskell
that
compiles
to
JavaScript
.
subset
の
気
前回
print
putStrLn
console
.
log
中
定義
show
関数
JSON
変換
程度
リスト
綺麗
表示
の
自分
手
の
なに
変換
型
検査
の
```
haskell
import
FFI
import
Prelude
main
::
Fay
()
main
=
putStrLn
$
list
_
show
$
[
i
|
i
<-
[
1
,
2
,
3
]]
list
_
show
::
[
Int
]
->
[
Int
]
list
_
show
ls
=
"["
++
list
_
show
'
ls
++
"]"
list
_
show
'
[]
=
""
list
_
show
'
(
x
:[])
=
show
x
list
_
show
'
(
x
:
xs
)
=
show
x
++
",
"
++
list
_
show
'
xs
```
```
bash
fay
-
O
-
o
test
.
js
test
.
hs
fay
:
test
.
hs
:
5
:
19
:
Couldn
'
t
match
expected
type
`
Char
'
with
actual
type
`
Int
'
Expected
type
:
[
Int
]
->
fay
-
base
-
0
.
14
.
2
.
0
:
Prelude
.
String
Actual
type
:
[
Int
]
->
[
Int
]
In
the
first
argument
of
`($)',
namely
`
list
_
show
'
In
the
second
argument
of
`($)',
namely
`
list
_
show
$
[
i
|
i
<-
[
1
,
2
,
3
]]'
test
.
hs
:
8
:
16
:
Couldn
'
t
match
expected
type
`
Int
'
with
actual
type
`
Char
'
Expected
type
:
[
Int
]
Actual
type
:
[
Char
]
In
the
first
argument
of
`(++)',
namely
`"["'
In
the
expression
:
"["
++
list
_
show
'
ls
++
"]"
make
:
***
[
test
]
Error
1
```
---
Sat
Mar
16
19
:
44
:
42
JST
2013
満足
[
部分
継続
便利
-
podhmo
日記
](
http
://
d
.
hatena
.
ne
.
jp
/
podhmo
/
20101217
/
1292565023
)
```
scheme
gosh
>
(
define
k
#
f
)
k
gosh
>
(
reset
(
for
-
each
(^
x
(
shift
cc
(
set
!
k
cc
)
x
))
(
list
1
2
3
)))
1
gosh
>
(
k
)
2
gosh
>
(
k
)
3
gosh
>
(
k
)
#<
undef
>
```
reset
-
shift
継続
引数
そこ
これ
有用
性
そこ
ループ
中断
再開
こと
再帰
これ
実現
中身
パラメータ
なん
全部
再帰
引数
中断
再開
パラメータ
保存
の
それら
実現
継続
有用
こと
---
[
部分
継続
チュートリアル
](
http
://
outer
-
inside
.
blogspot
.
jp
/
2011
/
03
/
blog
-
post
.
html
)
```
scheme
gosh
>
(
cons
0
(
reset
(
cons
1
(
shift
k
(
cons
2
'
null
)))))
(
0
2
.
null
)
gosh
>
k
#<
closure
(
call
/
pc
#
f
#
f
)>
gosh
>
(
cons
0
(
reset
(
cons
1
(
shift
cc
(
set
!
k
cc
)
(
cons
2
'
null
)))))
(
0
2
.
null
)
gosh
>
k
#<
closure
(
call
/
pc
#
f
#
f
)>
gosh
>
(
k
3
)
(
1
.
3
)
gosh
>
(
k
)
(
1
.
#<
undef
>)
```
引数
何
の
```
scheme
gosh
>
(
d
k
)
#<
closure
(
call
/
pc
#
f
#
f
)>
is
an
instance
of
class
<
procedure
>
slots
:
required
:
0
optional
:
#
t
optcount
:
1
locked
:
#
f
currying
:
#
f
constant
:
#
f
info
:
(
call
/
pc
#
f
#
f
)
setter
:
#
f
```
---
[
Gauche
ユーザ
リファレンス
:
9
.
20
gauche
.
partcont
-
部分
継続
](
http
://
practical
-
scheme
.
net
/
gauche
/
man
/
gauche
-
refj
_
94
.
html
)
初め
ココ
ん
気
ループ
外側
内側
reset
-
shift
こと
ループ
一周
よう
継続
ん
