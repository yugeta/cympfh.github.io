2013
年
3
月
6
日
水曜日
04
:
43
:
00
JST
A
sample
code
should
not
answer
7
because
the
character
,
7
seems
to
see
?.
---
R
5
RS
call
/
cc
多値
ため
values
call
/
cc
定義
多値
の
```
scheme
(
define
(
values
.
things
)
(
call
/
cc
(
lambda
(
cc
)
(
apply
cc
things
)))
)
```
ためし
実験
```
scheme
;
gosh
>
(
define
(
balues
.
things
)
(
call
/
cc
(
lambda
(
cont
)
(
apply
cont
things
))))
;
balues
;
gosh
>
(
balues
1
2
3
)
;
1
;
2
;
3
;
gosh
>
(
receive
(
a
b
c
)
(
balues
1
2
3
)
(
list
c
b
a
))
;
(
3
2
1
)
```
の
values
手続き
定義
本体
cc
大域
脱出
ただ
id
関数
ん
それ
の
---
dynamic
-
wind
サンプル
コード
意義
thunk
タイミング
前後
before
after
それ
ん
```
scheme
(
define
path
'())
(
define
c
#
f
)
(
define
(
add
s
)
(
push
!
path
s
))
(
dynamic
-
wind
(
lambda
()
(
add
'
connect
))
(
lambda
()
(
add
(
call
/
cc
(
lambda
(
c
0
)
(
set
!
c
c
0
)
'
talk
1
))))
(
lambda
()
(
add
'
disconnect
))
)
(
c
'
talk
2
)
```
これ
REPL
実験
```
scheme
gosh
>
path
(
disconnect
talk
2
connect
disconnect
talk
1
connect
)
gosh
>
c
#<
subr
continuation
>
gosh
>
(
c
'
talk
-
final
)
シェル
値
70
```
エラー
の
エラー
以上
---
2013
年
3
月
6
日
水曜日
08
:
25
:
00
JST
choose
マクロ
http
://
www
.
shido
.
info
/
lisp
/
scheme
_
amb
.
html
(
)
問題
http
://
www
.
geocities
.
jp
/
m
_
hiroi
/
light
/
abcruby
17
.
html
>
出典
Leon
Sterling
,
Ehud
Shapiro
(
著
),
松田
利夫
(
訳
),
Prolog
技芸
,
共立
出版
,
1988
,
(
278
頁
)
もの
```
scheme
(
define
(
fail
)
'@)
(
define
-
syntax
choose
(
syntax
-
rules
()
((_)
(
fail
))
((_
a
)
a
)
((_
a
b
...)
(
let
((
fail
0
fail
))
(
call
/
cc
(
lambda
(
cc
)
(
set
!
fail
(
lambda
()
(
set
!
fail
fail
0
)
(
cc
(
choose
b
...))))
(
cc
a
)))))
))
;;;
(
let
((
Michael
(
list
(
choose
1
2
3
)
'
bascket
(
choose
'
Islam
'
Australia
'
America
)))
(
Simon
(
list
(
choose
1
2
3
)
(
choose
'
bascket
'
tennis
'
clicket
)
'
Islam
))
(
Richard
(
list
(
choose
1
2
3
)
(
choose
'
bascket
'
tennis
'
clicket
)
(
choose
'
Islam
'
Australia
'
America
)))
)
(
define
(
require
cond
)
(
if
(
not
cond
)
(
fail
)))
(
define
(
unique
?
ls
)
(
if
(<
(
length
ls
)
2
)
#
t
(
if
(
member
(
car
ls
)
(
cdr
ls
))
#
f
(
unique
?
(
cdr
ls
)))))
(
require
(
unique
?
(
map
car
(
list
Michael
Simon
Richard
))))
(
require
(
unique
?
(
map
cadr
(
list
Michael
Simon
Richard
))))
(
require
(
unique
?
(
map
caddr
(
list
Michael
Simon
Richard
))))
(
require
(<
(
car
Michael
)
(
car
(
find
(
lambda
(
p
)
(
eq
?
(
caddr
p
)
'
America
))
(
list
Michael
Simon
Richard
))
)))
(
require
(<
(
car
Simon
)
(
car
(
find
(
lambda
(
p
)
(
eq
?
(
cadr
p
)
'
tennis
))
(
list
Michael
Simon
Richard
)))))
(
require
(=
1
(
car
(
find
(
lambda
(
p
)
(
eq
?
(
cadr
p
)
'
clicket
))
(
list
Michael
Simon
Richard
)))))
(
display
#`"
Michael
:
,
Michael
\
n
")
(
display
#`"
Simon
:
,
Simon
\
n
")
(
display
#`"
Richard
:
,
Richard
\
n
")
'
done
)
;
Michael
:
(
2
bascket
Australia
)
;
Simon
:
(
1
clicket
Islam
)
;
Richard
:
(
3
tennis
America
)
```
