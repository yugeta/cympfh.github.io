Sat
Mar
2
15
:
16
:
05
JST
2013
前
やつ
lcons
cdr
遅延
の
util
.
stream
定義
stream
-
cons
car
cdr
遅延
よう
みたい
[
Gauche
ユーザ
リファレンス
:
11
.
58
util
.
stream
-
ストリーム
ライブラリ
](
http
://
practical
-
scheme
.
net
/
gauche
/
man
/
gauche
-
refj
_
184
.
html
)
```
scheme
gosh
>
(
use
util
.
stream
)
#<
undef
>
gosh
>
(
define
fib
(
stream
-
cons
0
(
stream
-
cons
1
(
stream
-
map
+
(
stream
-
cdr
fib
)
fib
))))
fib
gosh
>
(
stream
->
list
(
stream
-
take
fib
10
))
(
0
1
1
2
3
5
8
13
21
34
)
```
2013
年
3
月
2
日
土曜日
20
:
48
:
14
JST
On
Lisp
殊
継続
Scheme
コード
Scheme
決定
性
計算
Scheme
choose
,
fail
関数
マクロ
ん
コード
>
本
コード
の
問題
の
>
著作
権
引用
こと
/
scheme
/
choose
-
fail
.
scm
.
txt
自分
の
/
scheme
/
amb
.
scm
.
txt
fail
定義
仕方
自分
自分
ヤツ
ん
こと
ひとつ
大域
変数
*
paths
*
複数
choose
これ
大丈夫
の
On
Lisp
の
実装
後ろ
追加
前
キュー
幅優先
探索
ん
```
scheme
gosh
>
(
choose
1
2
3
)
1
gosh
>
*
paths
*
(#<
closure
(
choose
#
f
#
f
#
f
)>
#<
closure
(
choose
#
f
#
f
#
f
)>)
gosh
>
()
;
2
()
gosh
>
(
choose
0
)
2
```
次
choose
前
の
これ
実用
時
問題
```
scheme
;;
奇数
gosh
>
(
let
1
a
(
choose
2
4
6
9
11
)
(
if
(
odd
?
a
)
a
(
fail
)))
9
;;
今度
偶数
gosh
>
(
let
1
a
(
choose
2
4
6
9
11
)
(
if
(
even
?
a
)
a
(
fail
)))
11
;;
ぁっ
```
