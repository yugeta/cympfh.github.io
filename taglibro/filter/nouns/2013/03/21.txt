2013
年
3
月
21
日
木曜日
14
:
35
:
29
JST
State
モナド
大体
使い方
つもり
StateT
大体
みたい
```
haskell
import
Control
.
Monad
.
State
data
Tree
=
Nil
|
Node
Int
Tree
Tree
deriving
Show
push
_
t
tr
n
=
case
tr
of
Nil
->
Node
n
Nil
Nil
Node
m
l
r
|
n
<
m
->
Node
m
(
push
_
t
l
n
)
r
|
True
->
Node
m
l
(
push
_
t
r
n
)
pop
_
t
tr
=
case
tr
of
Node
n
Nil
r
->
(
n
,
r
)
Node
n
(
Node
m
Nil
r
2
)
r
->
(
m
,
Node
n
r
2
r
)
Node
n
l
r
->
let
(
m
,
tr
)
=
pop
_
t
l
in
(
m
,
Node
n
tr
r
)
push
::
Int
->
State
Tree
Int
push
n
=
get
>>=
put
.(\
tr
->
push
_
t
tr
n
)
>>
return
n
pop
::
State
Tree
Int
pop
=
get
>>=
(\(
n
,
tr
)
->
put
tr
>>
return
n
).
pop
_
t
```
```
haskell
*
Main
Control
.
Monad
.
State
>
runState
(
push
0
)
Nil
(
0
,
Node
0
Nil
Nil
)
*
Main
Control
.
Monad
.
State
>
runState
(
push
0
>>
push
1
>>
push
2
)
Nil
(
2
,
Node
0
Nil
(
Node
1
Nil
(
Node
2
Nil
Nil
)))
*
Main
Control
.
Monad
.
State
>
runState
(
push
0
>>
push
1
>>
push
2
>>
pop
)
Nil
(
0
,
Node
1
Nil
(
Node
2
Nil
Nil
))
*
Main
Control
.
Monad
.
State
>
runState
(
push
2
>>
push
1
>>
push
0
>>
pop
)
Nil
(
0
,
Node
2
(
Node
1
Nil
Nil
)
Nil
)
```
