Sat
Jun
29
13
:
16
:
47
JST
2013
Scheme
継続
利用
例
amb
オペレーター
よう
継続
もの
の
これ
あと
fail
初期
化
みんな
継続
こと
必要
の
これ
関数
版
fail
初期
化
自己流
```
scheme
;;
choose
is
function
version
for
amb
(
define
*
paths
*
'())
(
define
*
nopath
-
sym
*
'
no
-
paths
)
(
define
(
fail
)
(
if
(
null
?
*
paths
*)
(
error
*
nopath
-
sym
*)
((
pop
!
*
paths
*))))
(
define
(
choose
.
ls
)
(
if
(
null
?
ls
)
(
fail
)
(
let
/
cc
return
(
push
!
*
paths
*
(
lambda
()
(
return
(
apply
choose
(
cdr
ls
)))))
(
car
ls
))))
(
define
-
syntax
require
(
syntax
-
rules
()
((_
b
)
(
if
(
not
b
)
(
fail
)))))
```
グラフ
パス
探索
```
scheme
;;
define
of
graph
(
define
vertexes
'(
0
1
2
3
))
(
define
edges
'((
0
.
1
)
(
1
.
0
)
(
0
.
2
)
(
2
.
0
)
(
1
.
2
)
(
2
.
1
)
(
1
.
3
)
(
3
.
1
)
(
2
.
3
)
(
3
.
2
))
)
(
define
(
conj
?
u
v
)
(
find
(
cut
equal
?
<>
(
cons
u
v
))
edges
))
;;
任意
さ
u
v
パス
;;
点
重複
さ
優先
;;
履歴
点
一
度
(
define
(
reachable
?
u
v
)
(
define
(%
r
u
his
)
(
if
(
conj
?
u
v
)
(
list
v
)
(
let
1
w
(
apply
choose
vertexes
)
(
require
(
conj
?
u
w
))
(
require
(
not
(
find
(
cut
=
w
<>)
his
)))
(
cons
w
(%
r
w
(
cons
u
his
)))
)))
(
string
-
join
(
map
x
->
string
(
cons
u
(%
r
u
'())))
"
->
")
)
;;
no
-
paths
エラー
fail
(
define
(
all
-
paths
u
v
)
(
display
(
reachable
?
u
v
))
(
newline
)
(
let
while
()
(
display
(
fail
))
(
newline
)
(
while
)
))
;
gosh
>
(
all
-
paths
0
3
)
;
0
->
1
->
3
;
0
->
2
->
3
;
***
ERROR
:
no
-
paths
;
(
ry
)
```
2
確か
パス
さ
3
パス
0
->
1
->
2
->
3
0
->
2
->
1
->
3
パス
