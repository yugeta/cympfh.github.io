scheme
継続
大域
脱出
様
モナド
途中
失敗
例
具体
的
イメージ
```
scheme
(
define
-
syntax
>>=
(
syntax
-
rules
()
((_
x
f
)
(
f
x
))
((_
x
f
g
...)
(>>=
(
f
x
)
g
...))
))
```
計算
予定
順番
`(>>=
x
f
g
...)`
これ
`(..(
g
(
f
x
))..)`
展開
左
方
記号
|>
ん
(
F
#
)、
Scheme
変数
名
|
特別
意味
bind
記号
```
scheme
(
define
1
+
(
lambda
(
x
)
(+
x
1
)))
(
define
1
-
(
lambda
(
x
)
(-
x
1
)))
(
define
sq
(
lambda
(
x
)
(*
x
x
)))
```
```
scheme
gosh
>
(>>=
2
sq
1
+)
5
```
途中
失敗
の
計算
列
途中
逆数
手続き
```
scheme
gosh
>
(
define
(
inv
x
)
(
if
(
zero
?
x
)
(
fail
'
inverse
-
error
)
(/
x
)))
inv
```
引数
0
時
fail
fail
グローバル
変数
```
scheme
gosh
>
(
define
fail
#
f
)
fail
gosh
>
(
call
/
cc
(
lambda
(
cc
)
(
set
!
fail
cc
)
(>>=
3
1
-
inv
sq
)))
1
/
4
gosh
>
(
call
/
cc
(
lambda
(
cc
)
(
set
!
fail
cc
)
(>>=
1
1
-
inv
sq
)))
inverse
-
error
```
(
call
/
cc
...
マクロ
さっき
>>=
%>>=
こと
```
scheme
(
define
-
syntax
%>>=
(
syntax
-
rules
()
((_
x
f
)
(
f
x
))
((_
x
f
g
...)
(%>>=
(
f
x
)
g
...))
))
(
define
-
syntax
>>=
(
syntax
-
rules
()
((_
x
...)
(
begin
(
define
fail
#
f
)
(
call
/
cc
(
lambda
(
cc
)
(
set
!
fail
cc
)
(%>>=
x
...))))
)))
```
毎回
大域
変数
fail
define
の
若干
気持ち
```
scheme
gosh
>
(>>=
3
inv
sq
)
1
/
9
gosh
>
(>>=
0
inv
sq
)
inverse
-
error
```
---
これ
モナド
畏怖
の
ん
途中
失敗
例
とき
失敗
チェック
個別
関数
必要
bind
関数
利点
今
自分
実験
例
