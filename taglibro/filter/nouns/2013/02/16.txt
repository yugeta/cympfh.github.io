2012
2
/
16
(
Sat
.)
無限
リスト
(
遅延
リスト
)
フィボナッチ
数列
計算
Haskell
コード
有名
```
haskell
main
=
print
$
take
10
fib
where
fib
=
0
:
1
:
(
zipWith
(+)
fib
$
tail
fib
)
```
```
bash
[
0
,
1
,
1
,
2
,
3
,
5
,
8
,
13
,
21
,
34
]
real
0
m
0
.
003
s
user
0
m
0
.
000
s
sys
0
m
0
.
000
s
```
十分
シンプル
fib
!!
0
,
fib
!!
1
cons
fib
!!
2
```
haskell
fib
!!
2
=
head
(
zipWith
(+)
..
..)
=
(
head
fib
)
+
(
head
$
tail
fib
)
=
0
+
(
head
(
1
:
..))
=
0
+
1
```
何
問題
Scheme
実験
Gauche
0
.
9
.
3
プリミティブ
型
lcons
cdr
遅延
cons
これ
評価
値
メモ
上
Haskell
コード
翻訳
もの
```
scheme
(
use
gauche
.
lazy
)
(
define
fib
($
lcons
*
0
1
$
lmap
+
fib
$
cdr
fib
))
(
define
(
main
_)
($
display
$
take
fib
10
))
***
ERROR
:
Attempt
to
recursively
force
a
lazy
pair
.
Stack
Trace
:
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_________________________
0
((
with
-
module
gauche
.
internal
%
zip
-
nary
-
args
)
args
)
At
line
73
of
"/
usr
/
local
/
share
/
gauche
-
0
.
9
/
0
.
9
.
3
.
3
/
lib
/
gauche
/
lazy
.
scm
"
1
(
take
fib
10
)
[
unknown
location
]
```
実行
時
エラー
`(
info
'
lcons
)`
まんま
コード
バグ
不幸
Gauche
これ
計算
の
`(
lcons
a
b
)`
b
遅延
それ
自体
評価
とき
a
b
計算
```
scheme
(
lcons
*
a
b
c
)
;;
(
lcons
a
(
lcons
b
c
))
```
a
,
b
計算
cdr
部
評価
時
b
,
c
計算
b
先
計算
結果
メモ
```
scheme
gosh
>
(
define
a
(
lcons
*
(
display
"
car
\
n
")
(
display
"
cadr
\
n
")
(
display
"
caddr
\
n
")))
car
cadr
a
gosh
>
(
car
a
)
#<
undef
>
gosh
>
(
cadr
a
)
caddr
#<
undef
>
```
問題
の
fib
!!
1
相当
(
cadr
fib
)
計算
これ
(
car
(
cdr
fib
))
(
cdr
fib
)
計算
(
cadr
fib
)
(
cddr
fib
)
fib
!!
1
評価
fib
!!
2
計算
それ
(
cdr
fib
)
必要
無限
再帰
頭
３つ
用意
map
計算
(
Fib
_
n
計算
Fib
_{
n
-
2
}
Fib
_{
n
-
1
}
こと
)
```
scheme
(
use
gauche
.
lazy
)
(
define
fib
($
lcons
*
0
1
1
$
lmap
(
cut
$
+
<>
$
*
<>
2
)
fib
$
cdr
fib
))
(
define
(
main
_)
($
display
$
take
fib
10
))
```
```
bash
(
0
1
1
2
3
5
8
13
21
34
)
real
0
m
0
.
052
s
user
0
m
0
.
040
s
sys
0
m
0
.
008
s
```
綺麗
