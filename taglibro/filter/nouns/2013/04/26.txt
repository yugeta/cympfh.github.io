Fri
Apr
26
17
:
05
:
49
JST
2013
計算
モデル
論
,
S
式
C
++
翻訳
機
面倒
実装
トコ
最大限
実行
例
```
bash
$
gosh
test
.
scm
<<
EOS
(
progn
(
include
stdio
.
h
)
'(
using
name
space
std
)
(
define
(
int
int
)
(
f
x
)
(*
(+
1
2
3
4
)
(/
(-
10
)))
(*
x
(
f
(-
x
1
)))))
EOS
#
include
<
stdio
.
h
>
using
name
space
std
;
int
f
(
int
x
)
{
((
1
+
2
+
3
+
4
)*(
1
/-
10
));
return
(
x
*
f
((
x
-
1
)));
}
```
関数
型
指定
なん
コレ
気持ち
cout
<<
...
実装
授業
遊び
```
scheme
(
define
(
translate
exp
)
(
if
(
symbol
?
exp
)
(
symbol
->
string
exp
)
(
if
(
number
?
exp
)
(
number
->
string
exp
)
(
if
(
null
?
exp
)
""
(
case
(
car
exp
)
((
progn
)
(
string
-
join
(
map
translate
(
cdr
exp
))
"\
n
"))
((
include
)
(
format
"#
include
<~
a
>\
n
"
(
cadr
exp
)))
((
quote
)
(
string
-
append
(
string
-
join
(
map
symbol
->
string
(
cadr
exp
))
"
")
";"))
((
define
)
(
let
((
funt
(
caadr
exp
))
(
argt
(
cdadr
exp
))
(
fun
(
caaddr
exp
))
(
args
(
cdaddr
exp
)))
(
define
(
append
-
return
ls
)
(
if
(=
(
length
ls
)
1
)
(
list
(
string
-
append
"
return
"
(
car
ls
)))
(
cons
(
car
ls
)
(
append
-
return
(
cdr
ls
)))))
(
format
"~
a
~
a
(~
a
)
{\
n
\
t
~
a
;\
n
}"
funt
fun
(
string
-
join
(
map
(
cut
format
"~
a
~
a
"
<>
<>)
argt
args
)
",
")
(
string
-
join
(
append
-
return
(
map
translate
(
cdddr
exp
)))
";\
n
\
t
"))))
((+
-
*
/)
(
cond
((
and
(
eq
?
(
car
exp
)
'-)
(=
(
length
exp
)
2
))
(
format
"-~
a
"
(
cadr
exp
)))
((
and
(
eq
?
(
car
exp
)
'/)
(=
(
length
exp
)
2
))
(
format
"(
1
/~
a
)"
(
translate
(
cadr
exp
))))
(
else
(
string
-
append
"("
(
string
-
join
(
map
translate
(
cdr
exp
))
(
symbol
->
string
(
car
exp
)))
")"))))
(
else
(
format
"~
a
(~
a
)"
(
car
exp
)
(
string
-
join
(
map
translate
(
cdr
exp
))
",
"))))))))
(
display
(
translate
(
read
)))
```
