F
#
memo
---
F
#
OCaml
拡張
独特
関数
適用
関数
合成
演算
子
###
関数
適用
```
fsharp
let
(|>)
x
f
=
f
x
let
(<|)
f
x
=
f
x
```
###
関数
合成
```
fsharp
let
(>>)
f
g
=
fun
x
->
g
(
f
x
)
let
(<<)
f
g
=
fun
x
->
f
(
g
x
)
```
上
2
パイプライン
演算
下
2
合成
演算
入力
さ
見た目
さ
優先
観
()
二
項
演算
子
中間
記法
前提
`
x
|>
f
`
`
f
x
`
-
`(<|)`,
`(|>)`
左
結合
-
`(<<)`
右
結合
-
`(>>)`
左
結合
結合
優先
順位
(
通常
関数
適用
)
>>
(|>)
>
(<<),
(>>)
>
(<|)
左
結合
右
結合
見た目
通り
結合
優先
順位
若干
曲者
使用
例
---
```
fsharp
let
sq
x
=
x
*
x
let
add
1
x
=
x
+
1
(
sq
(
add
1
2
))
```
これ
次
よう
```
fsharp
2
|>
add
1
|>
sq
```
次
エラー
```
fsharp
sq
<|
add
1
<|
2
```
これ
```
fsharp
(
sq
add
1
)
2
```
解釈
括弧
```
fsharp
sq
<|
(
add
1
<|
2
)
```
左向き
パイプライン
関数
合成
の
前提
(
)
```
fsharp
sq
<<
add
1
<|
2
```
```
fsharp
(
fun
x
->
sq
(
add
1
x
))
2
```
解釈
----
右向き
パイプライン
結合
左向き
パイプライン
結合
キレイ
左右
対象
嫌
f
,
g
,
h
3
関数
x
数
```
fsharp
f
(
g
(
h
x
))
```
パイプライン
こと
```
fsharp
x
|>
h
|>
g
|>
f
```
これ
x
h
g
f
こと
文章
一致
Haskell
(
簡単
定義
)
演算
左向き
パイプライン
```
fsharp
f
<<
g
<<
h
<|
x
```
記号
左右
対象
